{"version":3,"sources":["components/screen/TimeScreen.module.css","components/buttons/Button.module.css","App.module.css","components/screen/TimeScreen.tsx","components/buttons/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","TimeScreen","time","hours","Math","floor","slice","minutes","seconds","className","style","screen","first","second","Buttons","start","stop","wait","reset","watchOn","buttons","display","onClick","App","useState","setTime","stopWatchOn","setStopWatchOn","useEffect","unsubscribe","Subject","interval","pipe","takeUntil","subscribe","val","next","complete","timeout","onClickHandleStart","wasClicked","container","clearTimeout","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,OAAS,2BAA2B,MAAQ,0BAA0B,OAAS,6B,mBCAjGD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,QAAU,0B,mBCA9DD,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,kLCGhDC,EAAkC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAExCC,GAAS,IAAMC,KAAKC,MAAOH,EAAO,KAAQ,KAAKI,OAAO,GACtDC,GAAW,IAAMH,KAAKC,MAAOH,EAAO,GAAM,KAAKI,OAAO,GACtDE,GAAW,IAAMJ,KAAKC,MAAMH,EAAO,KAAKI,OAAO,GAErD,OACI,sBAAKG,UAAWC,IAAMC,OAAtB,UACI,sBAAMF,UAAWC,IAAME,MAAvB,SAA+BT,IAC/B,sBAAMM,UAAWC,IAAMG,OAAvB,eACA,sBAAMJ,UAAWC,IAAME,MAAvB,SAA+BL,IAC/B,sBAAME,UAAWC,IAAMG,OAAvB,eACA,sBAAMJ,UAAWC,IAAME,MAAvB,SAA+BJ,Q,iBCZ9BM,EAA+B,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAErE,OACI,sBAAKV,UAAWC,IAAMU,QAAtB,UACI,wBAAQX,UAAWU,EAAUT,IAAMW,QAAU,GAAIC,QAASP,EAA1D,mBAIA,wBAAQN,UAAWU,EAAU,GAAKT,IAAMW,QAASC,QAASN,EAA1D,kBAIA,wBAAQM,QAASL,EAAjB,kBAIA,wBAAQK,QAASJ,EAAjB,uBCoEGK,MAhFf,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACJtB,EADI,KACEuB,EADF,OAE2BD,oBAAS,GAFpC,mBAEJE,EAFI,KAESC,EAFT,KAIXC,qBAAU,WACN,IAAMC,EAAc,IAAIC,IAQxB,OAPAC,YAAS,KACJC,KAAKC,YAAUJ,IACfK,WAAU,WACHR,GACAD,GAAQ,SAACU,GAAD,OAASA,EAAM,QAG5B,WACHN,EAAYO,MAAK,GACjBP,EAAYQ,cAEjB,CAACX,IAEJ,IAwBIY,EAxBEC,EAAqB,WACvBZ,GAAe,IAsBfa,GAAa,EAuBjB,OACI,sBAAK/B,UAAWC,IAAM+B,UAAtB,UACI,cAAC,EAAD,CAAYvC,KAAMA,IAClB,cAAC,EAAD,CACIa,MAAOwB,EACPvB,KA/Cc,WACT,IAATd,IACAyB,GAAe,GACfF,EAAQ,KA6CJR,KA3Bc,WACtB,GAAGuB,EAIC,OAHAA,GAAa,EACbE,aAAaJ,QACbX,GAAe,GAGnBa,GAAa,EACbF,EAAUK,YAAW,WACjBH,GAAa,IACd,MAkBKtB,MAfe,WACvBO,EAAQ,GACRE,GAAe,GACF,IAATzB,GACAqC,KAYIpB,QAASO,QCnEVkB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,M","file":"static/js/main.5d1e1f1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"screen\":\"TimeScreen_screen__218FO\",\"first\":\"TimeScreen_first__1Dbx4\",\"second\":\"TimeScreen_second__2YGyw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Button_display__1e9lW\",\"buttons\":\"Button_buttons__3iWlJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"timer\":\"App_timer__1VUMF\"};","import React from 'react';\nimport style from './TimeScreen.module.css';\n\n\nexport const TimeScreen: React.FC<PropsType> = ({ time }) => {\n\n    const hours = ('0' + Math.floor((time / 3600) % 60)).slice(-2)\n    const minutes = ('0' + Math.floor((time / 60) % 60)).slice(-2)\n    const seconds = ('0' + Math.floor(time % 60)).slice(-2)\n\n    return (\n        <div className={style.screen}>\n            <span className={style.first}>{hours}</span>\n            <span className={style.second}>:</span>\n            <span className={style.first}>{minutes}</span>\n            <span className={style.second}>:</span>\n            <span className={style.first}>{seconds}</span>\n        </div>\n    );\n};\n\n\ntype PropsType = {\n    time: number\n};\n\n","import React from 'react';\nimport style from './Button.module.css';\n\n\nexport const Buttons: React.FC<PropsType> = ({ start, stop, wait, reset, watchOn }) => {\n\n    return (\n        <div className={style.buttons}>\n            <button className={watchOn ? style.display : ''} onClick={start}>\n                Start\n            </button>\n\n            <button className={watchOn ? '' : style.display} onClick={stop}>\n                Stop\n            </button>\n\n            <button onClick={wait}>\n                Wait\n            </button>\n\n            <button onClick={reset}>\n                Reset\n            </button>\n        </div>\n    );\n};\n\n\ntype PropsType = {\n    start: () => void\n    stop: () => void\n    wait: () => void\n    reset: () => void\n    watchOn: boolean\n}\n","import React, {useEffect, useState} from 'react';\nimport {interval, map, Subject, timer} from \"rxjs\";\nimport {takeUntil, first, tap} from 'rxjs/operators';\nimport style from './App.module.css';\nimport {TimeScreen} from './components/screen/TimeScreen';\nimport {Buttons} from './components/buttons/Button';\n\n\nfunction App() {\n    const [time, setTime] = useState(0);\n    const [stopWatchOn, setStopWatchOn] = useState(false);\n\n    useEffect(() => {\n        const unsubscribe = new Subject();\n        interval(1000)\n            .pipe(takeUntil(unsubscribe))\n            .subscribe(() => {\n                if (stopWatchOn) {\n                    setTime((val) => val + 1);\n                }\n            });\n        return () => {\n            unsubscribe.next(false);\n            unsubscribe.complete();\n        };\n    }, [stopWatchOn]);\n\n    const onClickHandleStart = () => {\n        setStopWatchOn(true);\n    };\n\n    const onClickHandleStop = () => {\n        if (time !== 0) {\n            setStopWatchOn(false);\n            setTime(0);\n        }\n    };\n\n    // const onClickHandleWait = () => {\n    //     debugger\n    //     timer(300)\n    //         .pipe(\n    //             first(),\n    //             tap(() => {\n    //                 setStopWatchOn(false);\n    //             })\n    //         )\n    //         .subscribe();\n    // };\n\n    let wasClicked = false;\n    let timeout: NodeJS.Timeout;\n    const onClickHandleWait = () => {\n        if(wasClicked) {\n            wasClicked = false;\n            clearTimeout(timeout);\n            setStopWatchOn(false);\n            return;\n        }\n        wasClicked = true;\n        timeout = setTimeout(() => {\n            wasClicked = false;\n        }, 300);\n    };\n\n    const onClickHandleReset = () => {\n        setTime(0);\n        setStopWatchOn(false);\n        if (time !== 0) {\n            onClickHandleStart();\n        }\n    };\n\n    return (\n        <div className={style.container}>\n            <TimeScreen time={time}/>\n            <Buttons\n                start={onClickHandleStart}\n                stop={onClickHandleStop}\n                wait={onClickHandleWait}\n                reset={onClickHandleReset}\n                watchOn={stopWatchOn}\n            />\n        </div>\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}